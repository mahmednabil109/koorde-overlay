// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KoordeClient is the client API for Koorde service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KoordeClient interface {
	BootStarpRPC(ctx context.Context, in *BootStrapPacket, opts ...grpc.CallOption) (*BootStrapReply, error)
	LookupRPC(ctx context.Context, in *LookupPacket, opts ...grpc.CallOption) (*PeerPacket, error)
	SuccessorRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerPacket, error)
	UpdateNeigborRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	BroadCastRPC(ctx context.Context, in *BlockPacket, opts ...grpc.CallOption) (*Empty, error)
	// DEBUG RPCS
	DSetSuccessor(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*Empty, error)
	DSetD(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*Empty, error)
	DGetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerPacket, error)
	DGetPointers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pointers, error)
	DLKup(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*PeerPacket, error)
}

type koordeClient struct {
	cc grpc.ClientConnInterface
}

func NewKoordeClient(cc grpc.ClientConnInterface) KoordeClient {
	return &koordeClient{cc}
}

func (c *koordeClient) BootStarpRPC(ctx context.Context, in *BootStrapPacket, opts ...grpc.CallOption) (*BootStrapReply, error) {
	out := new(BootStrapReply)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/BootStarpRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) LookupRPC(ctx context.Context, in *LookupPacket, opts ...grpc.CallOption) (*PeerPacket, error) {
	out := new(PeerPacket)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/LookupRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) SuccessorRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerPacket, error) {
	out := new(PeerPacket)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/SuccessorRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) UpdateNeigborRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/UpdateNeigborRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) BroadCastRPC(ctx context.Context, in *BlockPacket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/BroadCastRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) DSetSuccessor(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/DSetSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) DSetD(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/DSetD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) DGetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerPacket, error) {
	out := new(PeerPacket)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/DGetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) DGetPointers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pointers, error) {
	out := new(Pointers)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/DGetPointers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *koordeClient) DLKup(ctx context.Context, in *PeerPacket, opts ...grpc.CallOption) (*PeerPacket, error) {
	out := new(PeerPacket)
	err := c.cc.Invoke(ctx, "/rpc.Koorde/DLKup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KoordeServer is the server API for Koorde service.
// All implementations must embed UnimplementedKoordeServer
// for forward compatibility
type KoordeServer interface {
	BootStarpRPC(context.Context, *BootStrapPacket) (*BootStrapReply, error)
	LookupRPC(context.Context, *LookupPacket) (*PeerPacket, error)
	SuccessorRPC(context.Context, *Empty) (*PeerPacket, error)
	UpdateNeigborRPC(context.Context, *Empty) (*Empty, error)
	BroadCastRPC(context.Context, *BlockPacket) (*Empty, error)
	// DEBUG RPCS
	DSetSuccessor(context.Context, *PeerPacket) (*Empty, error)
	DSetD(context.Context, *PeerPacket) (*Empty, error)
	DGetID(context.Context, *Empty) (*PeerPacket, error)
	DGetPointers(context.Context, *Empty) (*Pointers, error)
	DLKup(context.Context, *PeerPacket) (*PeerPacket, error)
	mustEmbedUnimplementedKoordeServer()
}

// UnimplementedKoordeServer must be embedded to have forward compatible implementations.
type UnimplementedKoordeServer struct {
}

func (UnimplementedKoordeServer) BootStarpRPC(context.Context, *BootStrapPacket) (*BootStrapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootStarpRPC not implemented")
}
func (UnimplementedKoordeServer) LookupRPC(context.Context, *LookupPacket) (*PeerPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRPC not implemented")
}
func (UnimplementedKoordeServer) SuccessorRPC(context.Context, *Empty) (*PeerPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuccessorRPC not implemented")
}
func (UnimplementedKoordeServer) UpdateNeigborRPC(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNeigborRPC not implemented")
}
func (UnimplementedKoordeServer) BroadCastRPC(context.Context, *BlockPacket) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCastRPC not implemented")
}
func (UnimplementedKoordeServer) DSetSuccessor(context.Context, *PeerPacket) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSetSuccessor not implemented")
}
func (UnimplementedKoordeServer) DSetD(context.Context, *PeerPacket) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSetD not implemented")
}
func (UnimplementedKoordeServer) DGetID(context.Context, *Empty) (*PeerPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DGetID not implemented")
}
func (UnimplementedKoordeServer) DGetPointers(context.Context, *Empty) (*Pointers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DGetPointers not implemented")
}
func (UnimplementedKoordeServer) DLKup(context.Context, *PeerPacket) (*PeerPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DLKup not implemented")
}
func (UnimplementedKoordeServer) mustEmbedUnimplementedKoordeServer() {}

// UnsafeKoordeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KoordeServer will
// result in compilation errors.
type UnsafeKoordeServer interface {
	mustEmbedUnimplementedKoordeServer()
}

func RegisterKoordeServer(s grpc.ServiceRegistrar, srv KoordeServer) {
	s.RegisterService(&Koorde_ServiceDesc, srv)
}

func _Koorde_BootStarpRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootStrapPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).BootStarpRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/BootStarpRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).BootStarpRPC(ctx, req.(*BootStrapPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_LookupRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).LookupRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/LookupRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).LookupRPC(ctx, req.(*LookupPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_SuccessorRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).SuccessorRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/SuccessorRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).SuccessorRPC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_UpdateNeigborRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).UpdateNeigborRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/UpdateNeigborRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).UpdateNeigborRPC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_BroadCastRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).BroadCastRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/BroadCastRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).BroadCastRPC(ctx, req.(*BlockPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_DSetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).DSetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/DSetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).DSetSuccessor(ctx, req.(*PeerPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_DSetD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).DSetD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/DSetD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).DSetD(ctx, req.(*PeerPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_DGetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).DGetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/DGetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).DGetID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_DGetPointers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).DGetPointers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/DGetPointers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).DGetPointers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Koorde_DLKup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KoordeServer).DLKup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Koorde/DLKup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KoordeServer).DLKup(ctx, req.(*PeerPacket))
	}
	return interceptor(ctx, in, info, handler)
}

// Koorde_ServiceDesc is the grpc.ServiceDesc for Koorde service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Koorde_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Koorde",
	HandlerType: (*KoordeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BootStarpRPC",
			Handler:    _Koorde_BootStarpRPC_Handler,
		},
		{
			MethodName: "LookupRPC",
			Handler:    _Koorde_LookupRPC_Handler,
		},
		{
			MethodName: "SuccessorRPC",
			Handler:    _Koorde_SuccessorRPC_Handler,
		},
		{
			MethodName: "UpdateNeigborRPC",
			Handler:    _Koorde_UpdateNeigborRPC_Handler,
		},
		{
			MethodName: "BroadCastRPC",
			Handler:    _Koorde_BroadCastRPC_Handler,
		},
		{
			MethodName: "DSetSuccessor",
			Handler:    _Koorde_DSetSuccessor_Handler,
		},
		{
			MethodName: "DSetD",
			Handler:    _Koorde_DSetD_Handler,
		},
		{
			MethodName: "DGetID",
			Handler:    _Koorde_DGetID_Handler,
		},
		{
			MethodName: "DGetPointers",
			Handler:    _Koorde_DGetPointers_Handler,
		},
		{
			MethodName: "DLKup",
			Handler:    _Koorde_DLKup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc.proto",
}
